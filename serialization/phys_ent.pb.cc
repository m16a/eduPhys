// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serialization/phys_ent.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "serialization/phys_ent.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ser {

namespace {

const ::google::protobuf::Descriptor* Vector3f_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3f_reflection_ = NULL;
const ::google::protobuf::Descriptor* SerPhys_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SerPhys_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_serialization_2fphys_5fent_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_serialization_2fphys_5fent_2eproto() {
  protobuf_AddDesc_serialization_2fphys_5fent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "serialization/phys_ent.proto");
  GOOGLE_CHECK(file != NULL);
  Vector3f_descriptor_ = file->message_type(0);
  static const int Vector3f_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3f, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3f, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3f, z_),
  };
  Vector3f_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector3f_descriptor_,
      Vector3f::internal_default_instance(),
      Vector3f_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3f, _has_bits_),
      -1,
      -1,
      sizeof(Vector3f),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3f, _internal_metadata_));
  SerPhys_descriptor_ = file->message_type(1);
  static const int SerPhys_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerPhys, pos_),
  };
  SerPhys_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SerPhys_descriptor_,
      SerPhys::internal_default_instance(),
      SerPhys_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerPhys, _has_bits_),
      -1,
      -1,
      sizeof(SerPhys),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerPhys, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_serialization_2fphys_5fent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector3f_descriptor_, Vector3f::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SerPhys_descriptor_, SerPhys::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_serialization_2fphys_5fent_2eproto() {
  Vector3f_default_instance_.Shutdown();
  delete Vector3f_reflection_;
  SerPhys_default_instance_.Shutdown();
  delete SerPhys_reflection_;
}

void protobuf_InitDefaults_serialization_2fphys_5fent_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Vector3f_default_instance_.DefaultConstruct();
  SerPhys_default_instance_.DefaultConstruct();
  Vector3f_default_instance_.get_mutable()->InitAsDefaultInstance();
  SerPhys_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_serialization_2fphys_5fent_2eproto_once_);
void protobuf_InitDefaults_serialization_2fphys_5fent_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_serialization_2fphys_5fent_2eproto_once_,
                 &protobuf_InitDefaults_serialization_2fphys_5fent_2eproto_impl);
}
void protobuf_AddDesc_serialization_2fphys_5fent_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_serialization_2fphys_5fent_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034serialization/phys_ent.proto\022\003ser\"+\n\010V"
    "ector3f\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002"
    "\"%\n\007SerPhys\022\032\n\003pos\030\001 \002(\0132\r.ser.Vector3f", 119);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "serialization/phys_ent.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_serialization_2fphys_5fent_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_serialization_2fphys_5fent_2eproto_once_);
void protobuf_AddDesc_serialization_2fphys_5fent_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_serialization_2fphys_5fent_2eproto_once_,
                 &protobuf_AddDesc_serialization_2fphys_5fent_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_serialization_2fphys_5fent_2eproto {
  StaticDescriptorInitializer_serialization_2fphys_5fent_2eproto() {
    protobuf_AddDesc_serialization_2fphys_5fent_2eproto();
  }
} static_descriptor_initializer_serialization_2fphys_5fent_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3f::kXFieldNumber;
const int Vector3f::kYFieldNumber;
const int Vector3f::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3f::Vector3f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_serialization_2fphys_5fent_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ser.Vector3f)
}

void Vector3f::InitAsDefaultInstance() {
}

Vector3f::Vector3f(const Vector3f& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ser.Vector3f)
}

void Vector3f::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
}

Vector3f::~Vector3f() {
  // @@protoc_insertion_point(destructor:ser.Vector3f)
  SharedDtor();
}

void Vector3f::SharedDtor() {
}

void Vector3f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3f::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3f_descriptor_;
}

const Vector3f& Vector3f::default_instance() {
  protobuf_InitDefaults_serialization_2fphys_5fent_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Vector3f> Vector3f_default_instance_;

Vector3f* Vector3f::New(::google::protobuf::Arena* arena) const {
  Vector3f* n = new Vector3f;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector3f::Clear() {
// @@protoc_insertion_point(message_clear_start:ser.Vector3f)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vector3f, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vector3f*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Vector3f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ser.Vector3f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ser.Vector3f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ser.Vector3f)
  return false;
#undef DO_
}

void Vector3f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ser.Vector3f)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ser.Vector3f)
}

::google::protobuf::uint8* Vector3f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ser.Vector3f)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ser.Vector3f)
  return target;
}

size_t Vector3f::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ser.Vector3f)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Vector3f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ser.Vector3f)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ser.Vector3f)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Vector3f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ser.Vector3f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ser.Vector3f)
    UnsafeMergeFrom(*source);
  }
}

void Vector3f::MergeFrom(const Vector3f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ser.Vector3f)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Vector3f::UnsafeMergeFrom(const Vector3f& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Vector3f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ser.Vector3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3f::CopyFrom(const Vector3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ser.Vector3f)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Vector3f::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Vector3f::Swap(Vector3f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3f::InternalSwap(Vector3f* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3f::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3f_descriptor_;
  metadata.reflection = Vector3f_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3f

// required float x = 1;
bool Vector3f::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vector3f::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Vector3f::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vector3f::clear_x() {
  x_ = 0;
  clear_has_x();
}
float Vector3f::x() const {
  // @@protoc_insertion_point(field_get:ser.Vector3f.x)
  return x_;
}
void Vector3f::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:ser.Vector3f.x)
}

// required float y = 2;
bool Vector3f::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Vector3f::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Vector3f::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Vector3f::clear_y() {
  y_ = 0;
  clear_has_y();
}
float Vector3f::y() const {
  // @@protoc_insertion_point(field_get:ser.Vector3f.y)
  return y_;
}
void Vector3f::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:ser.Vector3f.y)
}

// required float z = 3;
bool Vector3f::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Vector3f::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Vector3f::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Vector3f::clear_z() {
  z_ = 0;
  clear_has_z();
}
float Vector3f::z() const {
  // @@protoc_insertion_point(field_get:ser.Vector3f.z)
  return z_;
}
void Vector3f::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:ser.Vector3f.z)
}

inline const Vector3f* Vector3f::internal_default_instance() {
  return &Vector3f_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerPhys::kPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerPhys::SerPhys()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_serialization_2fphys_5fent_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ser.SerPhys)
}

void SerPhys::InitAsDefaultInstance() {
  pos_ = const_cast< ::ser::Vector3f*>(
      ::ser::Vector3f::internal_default_instance());
}

SerPhys::SerPhys(const SerPhys& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ser.SerPhys)
}

void SerPhys::SharedCtor() {
  _cached_size_ = 0;
  pos_ = NULL;
}

SerPhys::~SerPhys() {
  // @@protoc_insertion_point(destructor:ser.SerPhys)
  SharedDtor();
}

void SerPhys::SharedDtor() {
  if (this != &SerPhys_default_instance_.get()) {
    delete pos_;
  }
}

void SerPhys::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerPhys::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SerPhys_descriptor_;
}

const SerPhys& SerPhys::default_instance() {
  protobuf_InitDefaults_serialization_2fphys_5fent_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SerPhys> SerPhys_default_instance_;

SerPhys* SerPhys::New(::google::protobuf::Arena* arena) const {
  SerPhys* n = new SerPhys;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerPhys::Clear() {
// @@protoc_insertion_point(message_clear_start:ser.SerPhys)
  if (has_pos()) {
    if (pos_ != NULL) pos_->::ser::Vector3f::Clear();
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SerPhys::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ser.SerPhys)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ser.Vector3f pos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ser.SerPhys)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ser.SerPhys)
  return false;
#undef DO_
}

void SerPhys::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ser.SerPhys)
  // required .ser.Vector3f pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pos_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ser.SerPhys)
}

::google::protobuf::uint8* SerPhys::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ser.SerPhys)
  // required .ser.Vector3f pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pos_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ser.SerPhys)
  return target;
}

size_t SerPhys::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ser.SerPhys)
  size_t total_size = 0;

  // required .ser.Vector3f pos = 1;
  if (has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerPhys::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ser.SerPhys)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SerPhys* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SerPhys>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ser.SerPhys)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ser.SerPhys)
    UnsafeMergeFrom(*source);
  }
}

void SerPhys::MergeFrom(const SerPhys& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ser.SerPhys)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SerPhys::UnsafeMergeFrom(const SerPhys& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      mutable_pos()->::ser::Vector3f::MergeFrom(from.pos());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SerPhys::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ser.SerPhys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerPhys::CopyFrom(const SerPhys& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ser.SerPhys)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SerPhys::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pos()) {
    if (!this->pos_->IsInitialized()) return false;
  }
  return true;
}

void SerPhys::Swap(SerPhys* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerPhys::InternalSwap(SerPhys* other) {
  std::swap(pos_, other->pos_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerPhys::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SerPhys_descriptor_;
  metadata.reflection = SerPhys_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerPhys

// required .ser.Vector3f pos = 1;
bool SerPhys::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SerPhys::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void SerPhys::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void SerPhys::clear_pos() {
  if (pos_ != NULL) pos_->::ser::Vector3f::Clear();
  clear_has_pos();
}
const ::ser::Vector3f& SerPhys::pos() const {
  // @@protoc_insertion_point(field_get:ser.SerPhys.pos)
  return pos_ != NULL ? *pos_
                         : *::ser::Vector3f::internal_default_instance();
}
::ser::Vector3f* SerPhys::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::ser::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:ser.SerPhys.pos)
  return pos_;
}
::ser::Vector3f* SerPhys::release_pos() {
  // @@protoc_insertion_point(field_release:ser.SerPhys.pos)
  clear_has_pos();
  ::ser::Vector3f* temp = pos_;
  pos_ = NULL;
  return temp;
}
void SerPhys::set_allocated_pos(::ser::Vector3f* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:ser.SerPhys.pos)
}

inline const SerPhys* SerPhys::internal_default_instance() {
  return &SerPhys_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ser

// @@protoc_insertion_point(global_scope)
