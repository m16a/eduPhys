// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: phys_ent.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "phys_ent.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ser {

namespace {

const ::google::protobuf::Descriptor* Vector3f_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3f_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quaternionf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quaternionf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Matrix3f_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Matrix3f_reflection_ = NULL;
const ::google::protobuf::Descriptor* SerPhys_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SerPhys_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SerPhys_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Sphere_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sphere_reflection_ = NULL;
const ::google::protobuf::Descriptor* Box_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Box_reflection_ = NULL;
const ::google::protobuf::Descriptor* Core_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Core_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_phys_5fent_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_phys_5fent_2eproto() {
  protobuf_AddDesc_phys_5fent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "phys_ent.proto");
  GOOGLE_CHECK(file != NULL);
  Vector3f_descriptor_ = file->message_type(0);
  static const int Vector3f_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3f, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3f, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3f, z_),
  };
  Vector3f_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector3f_descriptor_,
      Vector3f::internal_default_instance(),
      Vector3f_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3f, _has_bits_),
      -1,
      -1,
      sizeof(Vector3f),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3f, _internal_metadata_));
  Quaternionf_descriptor_ = file->message_type(1);
  static const int Quaternionf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternionf, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternionf, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternionf, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternionf, w_),
  };
  Quaternionf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Quaternionf_descriptor_,
      Quaternionf::internal_default_instance(),
      Quaternionf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternionf, _has_bits_),
      -1,
      -1,
      sizeof(Quaternionf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternionf, _internal_metadata_));
  Matrix3f_descriptor_ = file->message_type(2);
  static const int Matrix3f_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix3f, row1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix3f, row2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix3f, row3_),
  };
  Matrix3f_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Matrix3f_descriptor_,
      Matrix3f::internal_default_instance(),
      Matrix3f_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix3f, _has_bits_),
      -1,
      -1,
      sizeof(Matrix3f),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix3f, _internal_metadata_));
  SerPhys_descriptor_ = file->message_type(3);
  static const int SerPhys_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerPhys, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerPhys, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerPhys, rot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerPhys, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerPhys, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerPhys, minv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerPhys, jinv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerPhys, id_),
  };
  SerPhys_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SerPhys_descriptor_,
      SerPhys::internal_default_instance(),
      SerPhys_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerPhys, _has_bits_),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerPhys, _extensions_),
      sizeof(SerPhys),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerPhys, _internal_metadata_));
  SerPhys_Type_descriptor_ = SerPhys_descriptor_->enum_type(0);
  Sphere_descriptor_ = file->message_type(4);
  static const int Sphere_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sphere, r_),
  };
  Sphere_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Sphere_descriptor_,
      Sphere::internal_default_instance(),
      Sphere_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sphere, _has_bits_),
      -1,
      -1,
      sizeof(Sphere),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sphere, _internal_metadata_));
  Box_descriptor_ = file->message_type(5);
  static const int Box_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, size_),
  };
  Box_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Box_descriptor_,
      Box::internal_default_instance(),
      Box_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, _has_bits_),
      -1,
      -1,
      sizeof(Box),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, _internal_metadata_));
  Core_descriptor_ = file->message_type(6);
  static const int Core_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Core, objct_),
  };
  Core_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Core_descriptor_,
      Core::internal_default_instance(),
      Core_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Core, _has_bits_),
      -1,
      -1,
      sizeof(Core),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Core, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_phys_5fent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector3f_descriptor_, Vector3f::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Quaternionf_descriptor_, Quaternionf::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Matrix3f_descriptor_, Matrix3f::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SerPhys_descriptor_, SerPhys::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Sphere_descriptor_, Sphere::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Box_descriptor_, Box::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Core_descriptor_, Core::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_phys_5fent_2eproto() {
  Vector3f_default_instance_.Shutdown();
  delete Vector3f_reflection_;
  Quaternionf_default_instance_.Shutdown();
  delete Quaternionf_reflection_;
  Matrix3f_default_instance_.Shutdown();
  delete Matrix3f_reflection_;
  SerPhys_default_instance_.Shutdown();
  delete SerPhys_reflection_;
  Sphere_default_instance_.Shutdown();
  delete Sphere_reflection_;
  Box_default_instance_.Shutdown();
  delete Box_reflection_;
  Core_default_instance_.Shutdown();
  delete Core_reflection_;
}

void protobuf_InitDefaults_phys_5fent_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Vector3f_default_instance_.DefaultConstruct();
  Quaternionf_default_instance_.DefaultConstruct();
  Matrix3f_default_instance_.DefaultConstruct();
  SerPhys_default_instance_.DefaultConstruct();
  Sphere_default_instance_.DefaultConstruct();
  Box_default_instance_.DefaultConstruct();
  Core_default_instance_.DefaultConstruct();
  Vector3f_default_instance_.get_mutable()->InitAsDefaultInstance();
  Quaternionf_default_instance_.get_mutable()->InitAsDefaultInstance();
  Matrix3f_default_instance_.get_mutable()->InitAsDefaultInstance();
  SerPhys_default_instance_.get_mutable()->InitAsDefaultInstance();
  Sphere_default_instance_.get_mutable()->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    ::ser::SerPhys::internal_default_instance(),
    100, 11, false, false,
    ::ser::Sphere::internal_default_instance());
  Box_default_instance_.get_mutable()->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    ::ser::SerPhys::internal_default_instance(),
    101, 11, false, false,
    ::ser::Box::internal_default_instance());
  Core_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_phys_5fent_2eproto_once_);
void protobuf_InitDefaults_phys_5fent_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_phys_5fent_2eproto_once_,
                 &protobuf_InitDefaults_phys_5fent_2eproto_impl);
}
void protobuf_AddDesc_phys_5fent_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_phys_5fent_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016phys_ent.proto\022\003ser\"+\n\010Vector3f\022\t\n\001x\030\001"
    " \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\"9\n\013Quaternion"
    "f\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\022\t\n\001w\030"
    "\004 \002(\002\"a\n\010Matrix3f\022\033\n\004row1\030\001 \002(\0132\r.ser.Ve"
    "ctor3f\022\033\n\004row2\030\002 \002(\0132\r.ser.Vector3f\022\033\n\004r"
    "ow3\030\003 \002(\0132\r.ser.Vector3f\"\367\001\n\007SerPhys\022\037\n\004"
    "type\030\001 \002(\0162\021.ser.SerPhys.Type\022\032\n\003pos\030\002 \002"
    "(\0132\r.ser.Vector3f\022\035\n\003rot\030\003 \002(\0132\020.ser.Qua"
    "ternionf\022\030\n\001v\030\004 \002(\0132\r.ser.Vector3f\022\030\n\001w\030"
    "\005 \002(\0132\r.ser.Vector3f\022\014\n\004minv\030\006 \002(\002\022\033\n\004Ji"
    "nv\030\007 \002(\0132\r.ser.Matrix3f\022\n\n\002id\030\010 \002(\005\"\033\n\004T"
    "ype\022\n\n\006Sphere\020\001\022\007\n\003Box\020\002*\010\010d\020\200\200\200\200\002\"\?\n\006Sp"
    "here\022\t\n\001r\030\001 \002(\0022*\n\007serPhys\022\014.ser.SerPhys"
    "\030d \001(\0132\013.ser.Sphere\"K\n\003Box\022\033\n\004size\030\001 \002(\013"
    "2\r.ser.Vector3f2\'\n\007serPhys\022\014.ser.SerPhys"
    "\030e \001(\0132\010.ser.Box\"#\n\004Core\022\033\n\005objct\030\001 \003(\0132"
    "\014.ser.SerPhys", 653);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "phys_ent.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_phys_5fent_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_phys_5fent_2eproto_once_);
void protobuf_AddDesc_phys_5fent_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_phys_5fent_2eproto_once_,
                 &protobuf_AddDesc_phys_5fent_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_phys_5fent_2eproto {
  StaticDescriptorInitializer_phys_5fent_2eproto() {
    protobuf_AddDesc_phys_5fent_2eproto();
  }
} static_descriptor_initializer_phys_5fent_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3f::kXFieldNumber;
const int Vector3f::kYFieldNumber;
const int Vector3f::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3f::Vector3f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_phys_5fent_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ser.Vector3f)
}

void Vector3f::InitAsDefaultInstance() {
}

Vector3f::Vector3f(const Vector3f& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ser.Vector3f)
}

void Vector3f::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
}

Vector3f::~Vector3f() {
  // @@protoc_insertion_point(destructor:ser.Vector3f)
  SharedDtor();
}

void Vector3f::SharedDtor() {
}

void Vector3f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3f::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3f_descriptor_;
}

const Vector3f& Vector3f::default_instance() {
  protobuf_InitDefaults_phys_5fent_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Vector3f> Vector3f_default_instance_;

Vector3f* Vector3f::New(::google::protobuf::Arena* arena) const {
  Vector3f* n = new Vector3f;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector3f::Clear() {
// @@protoc_insertion_point(message_clear_start:ser.Vector3f)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vector3f, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vector3f*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Vector3f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ser.Vector3f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ser.Vector3f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ser.Vector3f)
  return false;
#undef DO_
}

void Vector3f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ser.Vector3f)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ser.Vector3f)
}

::google::protobuf::uint8* Vector3f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ser.Vector3f)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ser.Vector3f)
  return target;
}

size_t Vector3f::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ser.Vector3f)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Vector3f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ser.Vector3f)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ser.Vector3f)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Vector3f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ser.Vector3f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ser.Vector3f)
    UnsafeMergeFrom(*source);
  }
}

void Vector3f::MergeFrom(const Vector3f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ser.Vector3f)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Vector3f::UnsafeMergeFrom(const Vector3f& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Vector3f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ser.Vector3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3f::CopyFrom(const Vector3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ser.Vector3f)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Vector3f::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Vector3f::Swap(Vector3f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3f::InternalSwap(Vector3f* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3f::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3f_descriptor_;
  metadata.reflection = Vector3f_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3f

// required float x = 1;
bool Vector3f::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vector3f::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Vector3f::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vector3f::clear_x() {
  x_ = 0;
  clear_has_x();
}
float Vector3f::x() const {
  // @@protoc_insertion_point(field_get:ser.Vector3f.x)
  return x_;
}
void Vector3f::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:ser.Vector3f.x)
}

// required float y = 2;
bool Vector3f::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Vector3f::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Vector3f::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Vector3f::clear_y() {
  y_ = 0;
  clear_has_y();
}
float Vector3f::y() const {
  // @@protoc_insertion_point(field_get:ser.Vector3f.y)
  return y_;
}
void Vector3f::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:ser.Vector3f.y)
}

// required float z = 3;
bool Vector3f::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Vector3f::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Vector3f::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Vector3f::clear_z() {
  z_ = 0;
  clear_has_z();
}
float Vector3f::z() const {
  // @@protoc_insertion_point(field_get:ser.Vector3f.z)
  return z_;
}
void Vector3f::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:ser.Vector3f.z)
}

inline const Vector3f* Vector3f::internal_default_instance() {
  return &Vector3f_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Quaternionf::kXFieldNumber;
const int Quaternionf::kYFieldNumber;
const int Quaternionf::kZFieldNumber;
const int Quaternionf::kWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Quaternionf::Quaternionf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_phys_5fent_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ser.Quaternionf)
}

void Quaternionf::InitAsDefaultInstance() {
}

Quaternionf::Quaternionf(const Quaternionf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ser.Quaternionf)
}

void Quaternionf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_) + sizeof(w_));
}

Quaternionf::~Quaternionf() {
  // @@protoc_insertion_point(destructor:ser.Quaternionf)
  SharedDtor();
}

void Quaternionf::SharedDtor() {
}

void Quaternionf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quaternionf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quaternionf_descriptor_;
}

const Quaternionf& Quaternionf::default_instance() {
  protobuf_InitDefaults_phys_5fent_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Quaternionf> Quaternionf_default_instance_;

Quaternionf* Quaternionf::New(::google::protobuf::Arena* arena) const {
  Quaternionf* n = new Quaternionf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Quaternionf::Clear() {
// @@protoc_insertion_point(message_clear_start:ser.Quaternionf)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Quaternionf, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Quaternionf*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, w_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Quaternionf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ser.Quaternionf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_w;
        break;
      }

      // required float w = 4;
      case 4: {
        if (tag == 37) {
         parse_w:
          set_has_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ser.Quaternionf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ser.Quaternionf)
  return false;
#undef DO_
}

void Quaternionf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ser.Quaternionf)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // required float w = 4;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->w(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ser.Quaternionf)
}

::google::protobuf::uint8* Quaternionf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ser.Quaternionf)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // required float w = 4;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->w(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ser.Quaternionf)
  return target;
}

size_t Quaternionf::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ser.Quaternionf)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  if (has_w()) {
    // required float w = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Quaternionf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ser.Quaternionf)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

    // required float w = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quaternionf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ser.Quaternionf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Quaternionf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Quaternionf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ser.Quaternionf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ser.Quaternionf)
    UnsafeMergeFrom(*source);
  }
}

void Quaternionf::MergeFrom(const Quaternionf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ser.Quaternionf)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Quaternionf::UnsafeMergeFrom(const Quaternionf& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Quaternionf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ser.Quaternionf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaternionf::CopyFrom(const Quaternionf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ser.Quaternionf)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Quaternionf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Quaternionf::Swap(Quaternionf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Quaternionf::InternalSwap(Quaternionf* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(w_, other->w_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Quaternionf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quaternionf_descriptor_;
  metadata.reflection = Quaternionf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Quaternionf

// required float x = 1;
bool Quaternionf::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Quaternionf::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Quaternionf::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Quaternionf::clear_x() {
  x_ = 0;
  clear_has_x();
}
float Quaternionf::x() const {
  // @@protoc_insertion_point(field_get:ser.Quaternionf.x)
  return x_;
}
void Quaternionf::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:ser.Quaternionf.x)
}

// required float y = 2;
bool Quaternionf::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Quaternionf::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Quaternionf::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Quaternionf::clear_y() {
  y_ = 0;
  clear_has_y();
}
float Quaternionf::y() const {
  // @@protoc_insertion_point(field_get:ser.Quaternionf.y)
  return y_;
}
void Quaternionf::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:ser.Quaternionf.y)
}

// required float z = 3;
bool Quaternionf::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Quaternionf::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Quaternionf::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Quaternionf::clear_z() {
  z_ = 0;
  clear_has_z();
}
float Quaternionf::z() const {
  // @@protoc_insertion_point(field_get:ser.Quaternionf.z)
  return z_;
}
void Quaternionf::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:ser.Quaternionf.z)
}

// required float w = 4;
bool Quaternionf::has_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Quaternionf::set_has_w() {
  _has_bits_[0] |= 0x00000008u;
}
void Quaternionf::clear_has_w() {
  _has_bits_[0] &= ~0x00000008u;
}
void Quaternionf::clear_w() {
  w_ = 0;
  clear_has_w();
}
float Quaternionf::w() const {
  // @@protoc_insertion_point(field_get:ser.Quaternionf.w)
  return w_;
}
void Quaternionf::set_w(float value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:ser.Quaternionf.w)
}

inline const Quaternionf* Quaternionf::internal_default_instance() {
  return &Quaternionf_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Matrix3f::kRow1FieldNumber;
const int Matrix3f::kRow2FieldNumber;
const int Matrix3f::kRow3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Matrix3f::Matrix3f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_phys_5fent_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ser.Matrix3f)
}

void Matrix3f::InitAsDefaultInstance() {
  row1_ = const_cast< ::ser::Vector3f*>(
      ::ser::Vector3f::internal_default_instance());
  row2_ = const_cast< ::ser::Vector3f*>(
      ::ser::Vector3f::internal_default_instance());
  row3_ = const_cast< ::ser::Vector3f*>(
      ::ser::Vector3f::internal_default_instance());
}

Matrix3f::Matrix3f(const Matrix3f& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ser.Matrix3f)
}

void Matrix3f::SharedCtor() {
  _cached_size_ = 0;
  row1_ = NULL;
  row2_ = NULL;
  row3_ = NULL;
}

Matrix3f::~Matrix3f() {
  // @@protoc_insertion_point(destructor:ser.Matrix3f)
  SharedDtor();
}

void Matrix3f::SharedDtor() {
  if (this != &Matrix3f_default_instance_.get()) {
    delete row1_;
    delete row2_;
    delete row3_;
  }
}

void Matrix3f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Matrix3f::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Matrix3f_descriptor_;
}

const Matrix3f& Matrix3f::default_instance() {
  protobuf_InitDefaults_phys_5fent_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Matrix3f> Matrix3f_default_instance_;

Matrix3f* Matrix3f::New(::google::protobuf::Arena* arena) const {
  Matrix3f* n = new Matrix3f;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Matrix3f::Clear() {
// @@protoc_insertion_point(message_clear_start:ser.Matrix3f)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_row1()) {
      if (row1_ != NULL) row1_->::ser::Vector3f::Clear();
    }
    if (has_row2()) {
      if (row2_ != NULL) row2_->::ser::Vector3f::Clear();
    }
    if (has_row3()) {
      if (row3_ != NULL) row3_->::ser::Vector3f::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Matrix3f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ser.Matrix3f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ser.Vector3f row1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_row1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_row2;
        break;
      }

      // required .ser.Vector3f row2 = 2;
      case 2: {
        if (tag == 18) {
         parse_row2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_row2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_row3;
        break;
      }

      // required .ser.Vector3f row3 = 3;
      case 3: {
        if (tag == 26) {
         parse_row3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_row3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ser.Matrix3f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ser.Matrix3f)
  return false;
#undef DO_
}

void Matrix3f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ser.Matrix3f)
  // required .ser.Vector3f row1 = 1;
  if (has_row1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->row1_, output);
  }

  // required .ser.Vector3f row2 = 2;
  if (has_row2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->row2_, output);
  }

  // required .ser.Vector3f row3 = 3;
  if (has_row3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->row3_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ser.Matrix3f)
}

::google::protobuf::uint8* Matrix3f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ser.Matrix3f)
  // required .ser.Vector3f row1 = 1;
  if (has_row1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->row1_, false, target);
  }

  // required .ser.Vector3f row2 = 2;
  if (has_row2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->row2_, false, target);
  }

  // required .ser.Vector3f row3 = 3;
  if (has_row3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->row3_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ser.Matrix3f)
  return target;
}

size_t Matrix3f::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ser.Matrix3f)
  size_t total_size = 0;

  if (has_row1()) {
    // required .ser.Vector3f row1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->row1_);
  }

  if (has_row2()) {
    // required .ser.Vector3f row2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->row2_);
  }

  if (has_row3()) {
    // required .ser.Vector3f row3 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->row3_);
  }

  return total_size;
}
size_t Matrix3f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ser.Matrix3f)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .ser.Vector3f row1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->row1_);

    // required .ser.Vector3f row2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->row2_);

    // required .ser.Vector3f row3 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->row3_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Matrix3f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ser.Matrix3f)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Matrix3f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Matrix3f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ser.Matrix3f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ser.Matrix3f)
    UnsafeMergeFrom(*source);
  }
}

void Matrix3f::MergeFrom(const Matrix3f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ser.Matrix3f)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Matrix3f::UnsafeMergeFrom(const Matrix3f& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row1()) {
      mutable_row1()->::ser::Vector3f::MergeFrom(from.row1());
    }
    if (from.has_row2()) {
      mutable_row2()->::ser::Vector3f::MergeFrom(from.row2());
    }
    if (from.has_row3()) {
      mutable_row3()->::ser::Vector3f::MergeFrom(from.row3());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Matrix3f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ser.Matrix3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matrix3f::CopyFrom(const Matrix3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ser.Matrix3f)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Matrix3f::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_row1()) {
    if (!this->row1_->IsInitialized()) return false;
  }
  if (has_row2()) {
    if (!this->row2_->IsInitialized()) return false;
  }
  if (has_row3()) {
    if (!this->row3_->IsInitialized()) return false;
  }
  return true;
}

void Matrix3f::Swap(Matrix3f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Matrix3f::InternalSwap(Matrix3f* other) {
  std::swap(row1_, other->row1_);
  std::swap(row2_, other->row2_);
  std::swap(row3_, other->row3_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Matrix3f::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Matrix3f_descriptor_;
  metadata.reflection = Matrix3f_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Matrix3f

// required .ser.Vector3f row1 = 1;
bool Matrix3f::has_row1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Matrix3f::set_has_row1() {
  _has_bits_[0] |= 0x00000001u;
}
void Matrix3f::clear_has_row1() {
  _has_bits_[0] &= ~0x00000001u;
}
void Matrix3f::clear_row1() {
  if (row1_ != NULL) row1_->::ser::Vector3f::Clear();
  clear_has_row1();
}
const ::ser::Vector3f& Matrix3f::row1() const {
  // @@protoc_insertion_point(field_get:ser.Matrix3f.row1)
  return row1_ != NULL ? *row1_
                         : *::ser::Vector3f::internal_default_instance();
}
::ser::Vector3f* Matrix3f::mutable_row1() {
  set_has_row1();
  if (row1_ == NULL) {
    row1_ = new ::ser::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:ser.Matrix3f.row1)
  return row1_;
}
::ser::Vector3f* Matrix3f::release_row1() {
  // @@protoc_insertion_point(field_release:ser.Matrix3f.row1)
  clear_has_row1();
  ::ser::Vector3f* temp = row1_;
  row1_ = NULL;
  return temp;
}
void Matrix3f::set_allocated_row1(::ser::Vector3f* row1) {
  delete row1_;
  row1_ = row1;
  if (row1) {
    set_has_row1();
  } else {
    clear_has_row1();
  }
  // @@protoc_insertion_point(field_set_allocated:ser.Matrix3f.row1)
}

// required .ser.Vector3f row2 = 2;
bool Matrix3f::has_row2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Matrix3f::set_has_row2() {
  _has_bits_[0] |= 0x00000002u;
}
void Matrix3f::clear_has_row2() {
  _has_bits_[0] &= ~0x00000002u;
}
void Matrix3f::clear_row2() {
  if (row2_ != NULL) row2_->::ser::Vector3f::Clear();
  clear_has_row2();
}
const ::ser::Vector3f& Matrix3f::row2() const {
  // @@protoc_insertion_point(field_get:ser.Matrix3f.row2)
  return row2_ != NULL ? *row2_
                         : *::ser::Vector3f::internal_default_instance();
}
::ser::Vector3f* Matrix3f::mutable_row2() {
  set_has_row2();
  if (row2_ == NULL) {
    row2_ = new ::ser::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:ser.Matrix3f.row2)
  return row2_;
}
::ser::Vector3f* Matrix3f::release_row2() {
  // @@protoc_insertion_point(field_release:ser.Matrix3f.row2)
  clear_has_row2();
  ::ser::Vector3f* temp = row2_;
  row2_ = NULL;
  return temp;
}
void Matrix3f::set_allocated_row2(::ser::Vector3f* row2) {
  delete row2_;
  row2_ = row2;
  if (row2) {
    set_has_row2();
  } else {
    clear_has_row2();
  }
  // @@protoc_insertion_point(field_set_allocated:ser.Matrix3f.row2)
}

// required .ser.Vector3f row3 = 3;
bool Matrix3f::has_row3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Matrix3f::set_has_row3() {
  _has_bits_[0] |= 0x00000004u;
}
void Matrix3f::clear_has_row3() {
  _has_bits_[0] &= ~0x00000004u;
}
void Matrix3f::clear_row3() {
  if (row3_ != NULL) row3_->::ser::Vector3f::Clear();
  clear_has_row3();
}
const ::ser::Vector3f& Matrix3f::row3() const {
  // @@protoc_insertion_point(field_get:ser.Matrix3f.row3)
  return row3_ != NULL ? *row3_
                         : *::ser::Vector3f::internal_default_instance();
}
::ser::Vector3f* Matrix3f::mutable_row3() {
  set_has_row3();
  if (row3_ == NULL) {
    row3_ = new ::ser::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:ser.Matrix3f.row3)
  return row3_;
}
::ser::Vector3f* Matrix3f::release_row3() {
  // @@protoc_insertion_point(field_release:ser.Matrix3f.row3)
  clear_has_row3();
  ::ser::Vector3f* temp = row3_;
  row3_ = NULL;
  return temp;
}
void Matrix3f::set_allocated_row3(::ser::Vector3f* row3) {
  delete row3_;
  row3_ = row3;
  if (row3) {
    set_has_row3();
  } else {
    clear_has_row3();
  }
  // @@protoc_insertion_point(field_set_allocated:ser.Matrix3f.row3)
}

inline const Matrix3f* Matrix3f::internal_default_instance() {
  return &Matrix3f_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* SerPhys_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SerPhys_Type_descriptor_;
}
bool SerPhys_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SerPhys_Type SerPhys::Sphere;
const SerPhys_Type SerPhys::Box;
const SerPhys_Type SerPhys::Type_MIN;
const SerPhys_Type SerPhys::Type_MAX;
const int SerPhys::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerPhys::kTypeFieldNumber;
const int SerPhys::kPosFieldNumber;
const int SerPhys::kRotFieldNumber;
const int SerPhys::kVFieldNumber;
const int SerPhys::kWFieldNumber;
const int SerPhys::kMinvFieldNumber;
const int SerPhys::kJinvFieldNumber;
const int SerPhys::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerPhys::SerPhys()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_phys_5fent_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ser.SerPhys)
}

void SerPhys::InitAsDefaultInstance() {
  pos_ = const_cast< ::ser::Vector3f*>(
      ::ser::Vector3f::internal_default_instance());
  rot_ = const_cast< ::ser::Quaternionf*>(
      ::ser::Quaternionf::internal_default_instance());
  v_ = const_cast< ::ser::Vector3f*>(
      ::ser::Vector3f::internal_default_instance());
  w_ = const_cast< ::ser::Vector3f*>(
      ::ser::Vector3f::internal_default_instance());
  jinv_ = const_cast< ::ser::Matrix3f*>(
      ::ser::Matrix3f::internal_default_instance());
}

SerPhys::SerPhys(const SerPhys& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ser.SerPhys)
}

void SerPhys::SharedCtor() {
  _cached_size_ = 0;
  pos_ = NULL;
  rot_ = NULL;
  v_ = NULL;
  w_ = NULL;
  jinv_ = NULL;
  ::memset(&minv_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&minv_) + sizeof(id_));
  type_ = 1;
}

SerPhys::~SerPhys() {
  // @@protoc_insertion_point(destructor:ser.SerPhys)
  SharedDtor();
}

void SerPhys::SharedDtor() {
  if (this != &SerPhys_default_instance_.get()) {
    delete pos_;
    delete rot_;
    delete v_;
    delete w_;
    delete jinv_;
  }
}

void SerPhys::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerPhys::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SerPhys_descriptor_;
}

const SerPhys& SerPhys::default_instance() {
  protobuf_InitDefaults_phys_5fent_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SerPhys> SerPhys_default_instance_;

SerPhys* SerPhys::New(::google::protobuf::Arena* arena) const {
  SerPhys* n = new SerPhys;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerPhys::Clear() {
// @@protoc_insertion_point(message_clear_start:ser.SerPhys)
  _extensions_.Clear();
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SerPhys, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SerPhys*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(minv_, id_);
    type_ = 1;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::ser::Vector3f::Clear();
    }
    if (has_rot()) {
      if (rot_ != NULL) rot_->::ser::Quaternionf::Clear();
    }
    if (has_v()) {
      if (v_ != NULL) v_->::ser::Vector3f::Clear();
    }
    if (has_w()) {
      if (w_ != NULL) w_->::ser::Vector3f::Clear();
    }
    if (has_jinv()) {
      if (jinv_ != NULL) jinv_->::ser::Matrix3f::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SerPhys::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ser.SerPhys)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ser.SerPhys.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ser::SerPhys_Type_IsValid(value)) {
            set_type(static_cast< ::ser::SerPhys_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // required .ser.Vector3f pos = 2;
      case 2: {
        if (tag == 18) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rot;
        break;
      }

      // required .ser.Quaternionf rot = 3;
      case 3: {
        if (tag == 26) {
         parse_rot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_v;
        break;
      }

      // required .ser.Vector3f v = 4;
      case 4: {
        if (tag == 34) {
         parse_v:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_v()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_w;
        break;
      }

      // required .ser.Vector3f w = 5;
      case 5: {
        if (tag == 42) {
         parse_w:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_w()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_minv;
        break;
      }

      // required float minv = 6;
      case 6: {
        if (tag == 53) {
         parse_minv:
          set_has_minv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minv_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Jinv;
        break;
      }

      // required .ser.Matrix3f Jinv = 7;
      case 7: {
        if (tag == 58) {
         parse_Jinv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jinv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_id;
        break;
      }

      // required int32 id = 8;
      case 8: {
        if (tag == 64) {
         parse_id:
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, internal_default_instance(),
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ser.SerPhys)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ser.SerPhys)
  return false;
#undef DO_
}

void SerPhys::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ser.SerPhys)
  // required .ser.SerPhys.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .ser.Vector3f pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pos_, output);
  }

  // required .ser.Quaternionf rot = 3;
  if (has_rot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->rot_, output);
  }

  // required .ser.Vector3f v = 4;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->v_, output);
  }

  // required .ser.Vector3f w = 5;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->w_, output);
  }

  // required float minv = 6;
  if (has_minv()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->minv(), output);
  }

  // required .ser.Matrix3f Jinv = 7;
  if (has_jinv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->jinv_, output);
  }

  // required int32 id = 8;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->id(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ser.SerPhys)
}

::google::protobuf::uint8* SerPhys::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ser.SerPhys)
  // required .ser.SerPhys.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .ser.Vector3f pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pos_, false, target);
  }

  // required .ser.Quaternionf rot = 3;
  if (has_rot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->rot_, false, target);
  }

  // required .ser.Vector3f v = 4;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->v_, false, target);
  }

  // required .ser.Vector3f w = 5;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->w_, false, target);
  }

  // required float minv = 6;
  if (has_minv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->minv(), target);
  }

  // required .ser.Matrix3f Jinv = 7;
  if (has_jinv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->jinv_, false, target);
  }

  // required int32 id = 8;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->id(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 536870912, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ser.SerPhys)
  return target;
}

size_t SerPhys::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ser.SerPhys)
  size_t total_size = 0;

  if (has_type()) {
    // required .ser.SerPhys.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_pos()) {
    // required .ser.Vector3f pos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  if (has_rot()) {
    // required .ser.Quaternionf rot = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rot_);
  }

  if (has_v()) {
    // required .ser.Vector3f v = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->v_);
  }

  if (has_w()) {
    // required .ser.Vector3f w = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->w_);
  }

  if (has_minv()) {
    // required float minv = 6;
    total_size += 1 + 4;
  }

  if (has_jinv()) {
    // required .ser.Matrix3f Jinv = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->jinv_);
  }

  if (has_id()) {
    // required int32 id = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  return total_size;
}
size_t SerPhys::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ser.SerPhys)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required .ser.SerPhys.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required .ser.Vector3f pos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);

    // required .ser.Quaternionf rot = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rot_);

    // required .ser.Vector3f v = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->v_);

    // required .ser.Vector3f w = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->w_);

    // required float minv = 6;
    total_size += 1 + 4;

    // required .ser.Matrix3f Jinv = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->jinv_);

    // required int32 id = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerPhys::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ser.SerPhys)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SerPhys* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SerPhys>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ser.SerPhys)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ser.SerPhys)
    UnsafeMergeFrom(*source);
  }
}

void SerPhys::MergeFrom(const SerPhys& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ser.SerPhys)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SerPhys::UnsafeMergeFrom(const SerPhys& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pos()) {
      mutable_pos()->::ser::Vector3f::MergeFrom(from.pos());
    }
    if (from.has_rot()) {
      mutable_rot()->::ser::Quaternionf::MergeFrom(from.rot());
    }
    if (from.has_v()) {
      mutable_v()->::ser::Vector3f::MergeFrom(from.v());
    }
    if (from.has_w()) {
      mutable_w()->::ser::Vector3f::MergeFrom(from.w());
    }
    if (from.has_minv()) {
      set_minv(from.minv());
    }
    if (from.has_jinv()) {
      mutable_jinv()->::ser::Matrix3f::MergeFrom(from.jinv());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SerPhys::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ser.SerPhys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerPhys::CopyFrom(const SerPhys& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ser.SerPhys)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SerPhys::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (has_pos()) {
    if (!this->pos_->IsInitialized()) return false;
  }
  if (has_rot()) {
    if (!this->rot_->IsInitialized()) return false;
  }
  if (has_v()) {
    if (!this->v_->IsInitialized()) return false;
  }
  if (has_w()) {
    if (!this->w_->IsInitialized()) return false;
  }
  if (has_jinv()) {
    if (!this->jinv_->IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) {
    return false;
  }
  return true;
}

void SerPhys::Swap(SerPhys* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerPhys::InternalSwap(SerPhys* other) {
  std::swap(type_, other->type_);
  std::swap(pos_, other->pos_);
  std::swap(rot_, other->rot_);
  std::swap(v_, other->v_);
  std::swap(w_, other->w_);
  std::swap(minv_, other->minv_);
  std::swap(jinv_, other->jinv_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata SerPhys::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SerPhys_descriptor_;
  metadata.reflection = SerPhys_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerPhys

// required .ser.SerPhys.Type type = 1;
bool SerPhys::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SerPhys::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void SerPhys::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void SerPhys::clear_type() {
  type_ = 1;
  clear_has_type();
}
::ser::SerPhys_Type SerPhys::type() const {
  // @@protoc_insertion_point(field_get:ser.SerPhys.type)
  return static_cast< ::ser::SerPhys_Type >(type_);
}
void SerPhys::set_type(::ser::SerPhys_Type value) {
  assert(::ser::SerPhys_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ser.SerPhys.type)
}

// required .ser.Vector3f pos = 2;
bool SerPhys::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SerPhys::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
void SerPhys::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
void SerPhys::clear_pos() {
  if (pos_ != NULL) pos_->::ser::Vector3f::Clear();
  clear_has_pos();
}
const ::ser::Vector3f& SerPhys::pos() const {
  // @@protoc_insertion_point(field_get:ser.SerPhys.pos)
  return pos_ != NULL ? *pos_
                         : *::ser::Vector3f::internal_default_instance();
}
::ser::Vector3f* SerPhys::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::ser::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:ser.SerPhys.pos)
  return pos_;
}
::ser::Vector3f* SerPhys::release_pos() {
  // @@protoc_insertion_point(field_release:ser.SerPhys.pos)
  clear_has_pos();
  ::ser::Vector3f* temp = pos_;
  pos_ = NULL;
  return temp;
}
void SerPhys::set_allocated_pos(::ser::Vector3f* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:ser.SerPhys.pos)
}

// required .ser.Quaternionf rot = 3;
bool SerPhys::has_rot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SerPhys::set_has_rot() {
  _has_bits_[0] |= 0x00000004u;
}
void SerPhys::clear_has_rot() {
  _has_bits_[0] &= ~0x00000004u;
}
void SerPhys::clear_rot() {
  if (rot_ != NULL) rot_->::ser::Quaternionf::Clear();
  clear_has_rot();
}
const ::ser::Quaternionf& SerPhys::rot() const {
  // @@protoc_insertion_point(field_get:ser.SerPhys.rot)
  return rot_ != NULL ? *rot_
                         : *::ser::Quaternionf::internal_default_instance();
}
::ser::Quaternionf* SerPhys::mutable_rot() {
  set_has_rot();
  if (rot_ == NULL) {
    rot_ = new ::ser::Quaternionf;
  }
  // @@protoc_insertion_point(field_mutable:ser.SerPhys.rot)
  return rot_;
}
::ser::Quaternionf* SerPhys::release_rot() {
  // @@protoc_insertion_point(field_release:ser.SerPhys.rot)
  clear_has_rot();
  ::ser::Quaternionf* temp = rot_;
  rot_ = NULL;
  return temp;
}
void SerPhys::set_allocated_rot(::ser::Quaternionf* rot) {
  delete rot_;
  rot_ = rot;
  if (rot) {
    set_has_rot();
  } else {
    clear_has_rot();
  }
  // @@protoc_insertion_point(field_set_allocated:ser.SerPhys.rot)
}

// required .ser.Vector3f v = 4;
bool SerPhys::has_v() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SerPhys::set_has_v() {
  _has_bits_[0] |= 0x00000008u;
}
void SerPhys::clear_has_v() {
  _has_bits_[0] &= ~0x00000008u;
}
void SerPhys::clear_v() {
  if (v_ != NULL) v_->::ser::Vector3f::Clear();
  clear_has_v();
}
const ::ser::Vector3f& SerPhys::v() const {
  // @@protoc_insertion_point(field_get:ser.SerPhys.v)
  return v_ != NULL ? *v_
                         : *::ser::Vector3f::internal_default_instance();
}
::ser::Vector3f* SerPhys::mutable_v() {
  set_has_v();
  if (v_ == NULL) {
    v_ = new ::ser::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:ser.SerPhys.v)
  return v_;
}
::ser::Vector3f* SerPhys::release_v() {
  // @@protoc_insertion_point(field_release:ser.SerPhys.v)
  clear_has_v();
  ::ser::Vector3f* temp = v_;
  v_ = NULL;
  return temp;
}
void SerPhys::set_allocated_v(::ser::Vector3f* v) {
  delete v_;
  v_ = v;
  if (v) {
    set_has_v();
  } else {
    clear_has_v();
  }
  // @@protoc_insertion_point(field_set_allocated:ser.SerPhys.v)
}

// required .ser.Vector3f w = 5;
bool SerPhys::has_w() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SerPhys::set_has_w() {
  _has_bits_[0] |= 0x00000010u;
}
void SerPhys::clear_has_w() {
  _has_bits_[0] &= ~0x00000010u;
}
void SerPhys::clear_w() {
  if (w_ != NULL) w_->::ser::Vector3f::Clear();
  clear_has_w();
}
const ::ser::Vector3f& SerPhys::w() const {
  // @@protoc_insertion_point(field_get:ser.SerPhys.w)
  return w_ != NULL ? *w_
                         : *::ser::Vector3f::internal_default_instance();
}
::ser::Vector3f* SerPhys::mutable_w() {
  set_has_w();
  if (w_ == NULL) {
    w_ = new ::ser::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:ser.SerPhys.w)
  return w_;
}
::ser::Vector3f* SerPhys::release_w() {
  // @@protoc_insertion_point(field_release:ser.SerPhys.w)
  clear_has_w();
  ::ser::Vector3f* temp = w_;
  w_ = NULL;
  return temp;
}
void SerPhys::set_allocated_w(::ser::Vector3f* w) {
  delete w_;
  w_ = w;
  if (w) {
    set_has_w();
  } else {
    clear_has_w();
  }
  // @@protoc_insertion_point(field_set_allocated:ser.SerPhys.w)
}

// required float minv = 6;
bool SerPhys::has_minv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SerPhys::set_has_minv() {
  _has_bits_[0] |= 0x00000020u;
}
void SerPhys::clear_has_minv() {
  _has_bits_[0] &= ~0x00000020u;
}
void SerPhys::clear_minv() {
  minv_ = 0;
  clear_has_minv();
}
float SerPhys::minv() const {
  // @@protoc_insertion_point(field_get:ser.SerPhys.minv)
  return minv_;
}
void SerPhys::set_minv(float value) {
  set_has_minv();
  minv_ = value;
  // @@protoc_insertion_point(field_set:ser.SerPhys.minv)
}

// required .ser.Matrix3f Jinv = 7;
bool SerPhys::has_jinv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SerPhys::set_has_jinv() {
  _has_bits_[0] |= 0x00000040u;
}
void SerPhys::clear_has_jinv() {
  _has_bits_[0] &= ~0x00000040u;
}
void SerPhys::clear_jinv() {
  if (jinv_ != NULL) jinv_->::ser::Matrix3f::Clear();
  clear_has_jinv();
}
const ::ser::Matrix3f& SerPhys::jinv() const {
  // @@protoc_insertion_point(field_get:ser.SerPhys.Jinv)
  return jinv_ != NULL ? *jinv_
                         : *::ser::Matrix3f::internal_default_instance();
}
::ser::Matrix3f* SerPhys::mutable_jinv() {
  set_has_jinv();
  if (jinv_ == NULL) {
    jinv_ = new ::ser::Matrix3f;
  }
  // @@protoc_insertion_point(field_mutable:ser.SerPhys.Jinv)
  return jinv_;
}
::ser::Matrix3f* SerPhys::release_jinv() {
  // @@protoc_insertion_point(field_release:ser.SerPhys.Jinv)
  clear_has_jinv();
  ::ser::Matrix3f* temp = jinv_;
  jinv_ = NULL;
  return temp;
}
void SerPhys::set_allocated_jinv(::ser::Matrix3f* jinv) {
  delete jinv_;
  jinv_ = jinv;
  if (jinv) {
    set_has_jinv();
  } else {
    clear_has_jinv();
  }
  // @@protoc_insertion_point(field_set_allocated:ser.SerPhys.Jinv)
}

// required int32 id = 8;
bool SerPhys::has_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SerPhys::set_has_id() {
  _has_bits_[0] |= 0x00000080u;
}
void SerPhys::clear_has_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void SerPhys::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 SerPhys::id() const {
  // @@protoc_insertion_point(field_get:ser.SerPhys.id)
  return id_;
}
void SerPhys::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ser.SerPhys.id)
}

inline const SerPhys* SerPhys::internal_default_instance() {
  return &SerPhys_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sphere::kRFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sphere::kSerPhysFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ser::SerPhys,
    ::google::protobuf::internal::MessageTypeTraits< ::ser::Sphere >, 11, false >
  Sphere::serPhys(kSerPhysFieldNumber, *::ser::Sphere::internal_default_instance());
Sphere::Sphere()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_phys_5fent_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ser.Sphere)
}

void Sphere::InitAsDefaultInstance() {
}

Sphere::Sphere(const Sphere& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ser.Sphere)
}

void Sphere::SharedCtor() {
  _cached_size_ = 0;
  r_ = 0;
}

Sphere::~Sphere() {
  // @@protoc_insertion_point(destructor:ser.Sphere)
  SharedDtor();
}

void Sphere::SharedDtor() {
}

void Sphere::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sphere::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sphere_descriptor_;
}

const Sphere& Sphere::default_instance() {
  protobuf_InitDefaults_phys_5fent_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Sphere> Sphere_default_instance_;

Sphere* Sphere::New(::google::protobuf::Arena* arena) const {
  Sphere* n = new Sphere;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sphere::Clear() {
// @@protoc_insertion_point(message_clear_start:ser.Sphere)
  r_ = 0;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Sphere::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ser.Sphere)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float r = 1;
      case 1: {
        if (tag == 13) {
          set_has_r();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ser.Sphere)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ser.Sphere)
  return false;
#undef DO_
}

void Sphere::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ser.Sphere)
  // required float r = 1;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->r(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ser.Sphere)
}

::google::protobuf::uint8* Sphere::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ser.Sphere)
  // required float r = 1;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->r(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ser.Sphere)
  return target;
}

size_t Sphere::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ser.Sphere)
  size_t total_size = 0;

  // required float r = 1;
  if (has_r()) {
    total_size += 1 + 4;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sphere::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ser.Sphere)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Sphere* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sphere>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ser.Sphere)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ser.Sphere)
    UnsafeMergeFrom(*source);
  }
}

void Sphere::MergeFrom(const Sphere& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ser.Sphere)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Sphere::UnsafeMergeFrom(const Sphere& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r()) {
      set_r(from.r());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Sphere::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ser.Sphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sphere::CopyFrom(const Sphere& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ser.Sphere)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Sphere::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Sphere::Swap(Sphere* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sphere::InternalSwap(Sphere* other) {
  std::swap(r_, other->r_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sphere::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sphere_descriptor_;
  metadata.reflection = Sphere_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sphere

// required float r = 1;
bool Sphere::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Sphere::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
void Sphere::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
void Sphere::clear_r() {
  r_ = 0;
  clear_has_r();
}
float Sphere::r() const {
  // @@protoc_insertion_point(field_get:ser.Sphere.r)
  return r_;
}
void Sphere::set_r(float value) {
  set_has_r();
  r_ = value;
  // @@protoc_insertion_point(field_set:ser.Sphere.r)
}

inline const Sphere* Sphere::internal_default_instance() {
  return &Sphere_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Box::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Box::kSerPhysFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ser::SerPhys,
    ::google::protobuf::internal::MessageTypeTraits< ::ser::Box >, 11, false >
  Box::serPhys(kSerPhysFieldNumber, *::ser::Box::internal_default_instance());
Box::Box()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_phys_5fent_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ser.Box)
}

void Box::InitAsDefaultInstance() {
  size_ = const_cast< ::ser::Vector3f*>(
      ::ser::Vector3f::internal_default_instance());
}

Box::Box(const Box& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ser.Box)
}

void Box::SharedCtor() {
  _cached_size_ = 0;
  size_ = NULL;
}

Box::~Box() {
  // @@protoc_insertion_point(destructor:ser.Box)
  SharedDtor();
}

void Box::SharedDtor() {
  if (this != &Box_default_instance_.get()) {
    delete size_;
  }
}

void Box::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Box::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Box_descriptor_;
}

const Box& Box::default_instance() {
  protobuf_InitDefaults_phys_5fent_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Box> Box_default_instance_;

Box* Box::New(::google::protobuf::Arena* arena) const {
  Box* n = new Box;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Box::Clear() {
// @@protoc_insertion_point(message_clear_start:ser.Box)
  if (has_size()) {
    if (size_ != NULL) size_->::ser::Vector3f::Clear();
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Box::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ser.Box)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ser.Vector3f size = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ser.Box)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ser.Box)
  return false;
#undef DO_
}

void Box::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ser.Box)
  // required .ser.Vector3f size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->size_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ser.Box)
}

::google::protobuf::uint8* Box::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ser.Box)
  // required .ser.Vector3f size = 1;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->size_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ser.Box)
  return target;
}

size_t Box::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ser.Box)
  size_t total_size = 0;

  // required .ser.Vector3f size = 1;
  if (has_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->size_);
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Box::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ser.Box)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Box* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Box>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ser.Box)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ser.Box)
    UnsafeMergeFrom(*source);
  }
}

void Box::MergeFrom(const Box& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ser.Box)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Box::UnsafeMergeFrom(const Box& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      mutable_size()->::ser::Vector3f::MergeFrom(from.size());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Box::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ser.Box)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Box::CopyFrom(const Box& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ser.Box)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Box::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_size()) {
    if (!this->size_->IsInitialized()) return false;
  }
  return true;
}

void Box::Swap(Box* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Box::InternalSwap(Box* other) {
  std::swap(size_, other->size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Box::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Box_descriptor_;
  metadata.reflection = Box_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Box

// required .ser.Vector3f size = 1;
bool Box::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Box::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
void Box::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void Box::clear_size() {
  if (size_ != NULL) size_->::ser::Vector3f::Clear();
  clear_has_size();
}
const ::ser::Vector3f& Box::size() const {
  // @@protoc_insertion_point(field_get:ser.Box.size)
  return size_ != NULL ? *size_
                         : *::ser::Vector3f::internal_default_instance();
}
::ser::Vector3f* Box::mutable_size() {
  set_has_size();
  if (size_ == NULL) {
    size_ = new ::ser::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:ser.Box.size)
  return size_;
}
::ser::Vector3f* Box::release_size() {
  // @@protoc_insertion_point(field_release:ser.Box.size)
  clear_has_size();
  ::ser::Vector3f* temp = size_;
  size_ = NULL;
  return temp;
}
void Box::set_allocated_size(::ser::Vector3f* size) {
  delete size_;
  size_ = size;
  if (size) {
    set_has_size();
  } else {
    clear_has_size();
  }
  // @@protoc_insertion_point(field_set_allocated:ser.Box.size)
}

inline const Box* Box::internal_default_instance() {
  return &Box_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Core::kObjctFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Core::Core()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_phys_5fent_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ser.Core)
}

void Core::InitAsDefaultInstance() {
}

Core::Core(const Core& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ser.Core)
}

void Core::SharedCtor() {
  _cached_size_ = 0;
}

Core::~Core() {
  // @@protoc_insertion_point(destructor:ser.Core)
  SharedDtor();
}

void Core::SharedDtor() {
}

void Core::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Core::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Core_descriptor_;
}

const Core& Core::default_instance() {
  protobuf_InitDefaults_phys_5fent_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Core> Core_default_instance_;

Core* Core::New(::google::protobuf::Arena* arena) const {
  Core* n = new Core;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Core::Clear() {
// @@protoc_insertion_point(message_clear_start:ser.Core)
  objct_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Core::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ser.Core)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ser.SerPhys objct = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_objct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_objct()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_objct;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ser.Core)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ser.Core)
  return false;
#undef DO_
}

void Core::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ser.Core)
  // repeated .ser.SerPhys objct = 1;
  for (unsigned int i = 0, n = this->objct_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->objct(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ser.Core)
}

::google::protobuf::uint8* Core::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ser.Core)
  // repeated .ser.SerPhys objct = 1;
  for (unsigned int i = 0, n = this->objct_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->objct(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ser.Core)
  return target;
}

size_t Core::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ser.Core)
  size_t total_size = 0;

  // repeated .ser.SerPhys objct = 1;
  {
    unsigned int count = this->objct_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objct(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Core::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ser.Core)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Core* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Core>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ser.Core)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ser.Core)
    UnsafeMergeFrom(*source);
  }
}

void Core::MergeFrom(const Core& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ser.Core)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Core::UnsafeMergeFrom(const Core& from) {
  GOOGLE_DCHECK(&from != this);
  objct_.MergeFrom(from.objct_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Core::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ser.Core)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Core::CopyFrom(const Core& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ser.Core)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Core::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->objct())) return false;
  return true;
}

void Core::Swap(Core* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Core::InternalSwap(Core* other) {
  objct_.UnsafeArenaSwap(&other->objct_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Core::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Core_descriptor_;
  metadata.reflection = Core_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Core

// repeated .ser.SerPhys objct = 1;
int Core::objct_size() const {
  return objct_.size();
}
void Core::clear_objct() {
  objct_.Clear();
}
const ::ser::SerPhys& Core::objct(int index) const {
  // @@protoc_insertion_point(field_get:ser.Core.objct)
  return objct_.Get(index);
}
::ser::SerPhys* Core::mutable_objct(int index) {
  // @@protoc_insertion_point(field_mutable:ser.Core.objct)
  return objct_.Mutable(index);
}
::ser::SerPhys* Core::add_objct() {
  // @@protoc_insertion_point(field_add:ser.Core.objct)
  return objct_.Add();
}
::google::protobuf::RepeatedPtrField< ::ser::SerPhys >*
Core::mutable_objct() {
  // @@protoc_insertion_point(field_mutable_list:ser.Core.objct)
  return &objct_;
}
const ::google::protobuf::RepeatedPtrField< ::ser::SerPhys >&
Core::objct() const {
  // @@protoc_insertion_point(field_list:ser.Core.objct)
  return objct_;
}

inline const Core* Core::internal_default_instance() {
  return &Core_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ser

// @@protoc_insertion_point(global_scope)
