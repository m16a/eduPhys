// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serialization/phys_ent.proto

#ifndef PROTOBUF_serialization_2fphys_5fent_2eproto__INCLUDED
#define PROTOBUF_serialization_2fphys_5fent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ser {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_serialization_2fphys_5fent_2eproto();
void protobuf_InitDefaults_serialization_2fphys_5fent_2eproto();
void protobuf_AssignDesc_serialization_2fphys_5fent_2eproto();
void protobuf_ShutdownFile_serialization_2fphys_5fent_2eproto();

class SerPhys;
class Vector3f;

// ===================================================================

class Vector3f : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ser.Vector3f) */ {
 public:
  Vector3f();
  virtual ~Vector3f();

  Vector3f(const Vector3f& from);

  inline Vector3f& operator=(const Vector3f& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3f& default_instance();

  static const Vector3f* internal_default_instance();

  void Swap(Vector3f* other);

  // implements Message ----------------------------------------------

  inline Vector3f* New() const { return New(NULL); }

  Vector3f* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector3f& from);
  void MergeFrom(const Vector3f& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vector3f* other);
  void UnsafeMergeFrom(const Vector3f& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // required float z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:ser.Vector3f)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  friend void  protobuf_InitDefaults_serialization_2fphys_5fent_2eproto_impl();
  friend void  protobuf_AddDesc_serialization_2fphys_5fent_2eproto_impl();
  friend void protobuf_AssignDesc_serialization_2fphys_5fent_2eproto();
  friend void protobuf_ShutdownFile_serialization_2fphys_5fent_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Vector3f> Vector3f_default_instance_;

// -------------------------------------------------------------------

class SerPhys : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ser.SerPhys) */ {
 public:
  SerPhys();
  virtual ~SerPhys();

  SerPhys(const SerPhys& from);

  inline SerPhys& operator=(const SerPhys& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SerPhys& default_instance();

  static const SerPhys* internal_default_instance();

  void Swap(SerPhys* other);

  // implements Message ----------------------------------------------

  inline SerPhys* New() const { return New(NULL); }

  SerPhys* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SerPhys& from);
  void MergeFrom(const SerPhys& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SerPhys* other);
  void UnsafeMergeFrom(const SerPhys& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ser.Vector3f pos = 1;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 1;
  const ::ser::Vector3f& pos() const;
  ::ser::Vector3f* mutable_pos();
  ::ser::Vector3f* release_pos();
  void set_allocated_pos(::ser::Vector3f* pos);

  // @@protoc_insertion_point(class_scope:ser.SerPhys)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::ser::Vector3f* pos_;
  friend void  protobuf_InitDefaults_serialization_2fphys_5fent_2eproto_impl();
  friend void  protobuf_AddDesc_serialization_2fphys_5fent_2eproto_impl();
  friend void protobuf_AssignDesc_serialization_2fphys_5fent_2eproto();
  friend void protobuf_ShutdownFile_serialization_2fphys_5fent_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SerPhys> SerPhys_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3f

// required float x = 1;
inline bool Vector3f::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector3f::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector3f::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector3f::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vector3f::x() const {
  // @@protoc_insertion_point(field_get:ser.Vector3f.x)
  return x_;
}
inline void Vector3f::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:ser.Vector3f.x)
}

// required float y = 2;
inline bool Vector3f::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector3f::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector3f::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector3f::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vector3f::y() const {
  // @@protoc_insertion_point(field_get:ser.Vector3f.y)
  return y_;
}
inline void Vector3f::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:ser.Vector3f.y)
}

// required float z = 3;
inline bool Vector3f::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector3f::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector3f::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector3f::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Vector3f::z() const {
  // @@protoc_insertion_point(field_get:ser.Vector3f.z)
  return z_;
}
inline void Vector3f::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:ser.Vector3f.z)
}

inline const Vector3f* Vector3f::internal_default_instance() {
  return &Vector3f_default_instance_.get();
}
// -------------------------------------------------------------------

// SerPhys

// required .ser.Vector3f pos = 1;
inline bool SerPhys::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SerPhys::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SerPhys::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SerPhys::clear_pos() {
  if (pos_ != NULL) pos_->::ser::Vector3f::Clear();
  clear_has_pos();
}
inline const ::ser::Vector3f& SerPhys::pos() const {
  // @@protoc_insertion_point(field_get:ser.SerPhys.pos)
  return pos_ != NULL ? *pos_
                         : *::ser::Vector3f::internal_default_instance();
}
inline ::ser::Vector3f* SerPhys::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::ser::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:ser.SerPhys.pos)
  return pos_;
}
inline ::ser::Vector3f* SerPhys::release_pos() {
  // @@protoc_insertion_point(field_release:ser.SerPhys.pos)
  clear_has_pos();
  ::ser::Vector3f* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void SerPhys::set_allocated_pos(::ser::Vector3f* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:ser.SerPhys.pos)
}

inline const SerPhys* SerPhys::internal_default_instance() {
  return &SerPhys_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ser

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_serialization_2fphys_5fent_2eproto__INCLUDED
